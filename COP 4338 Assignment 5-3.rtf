{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fmodern\fcharset0 CourierNewPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12840\viewh16440\viewkind1\viewscale110
\deftab720
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\f0\b\fs16 \cf0 Assignment 5 Specifications
\f1\b0 \
\

\f0\b Due
\f1\b0 : 12 November 2019 - class time.\
\

\f0\b Assignment: 
\f1\b0 Write algorithms and programs to read an input file of dates and generate an output file that contains a list of validated and converted dates, along with the contents of the original input file. In summary, implement a pair of programs that will interface and exchange data \'97 in this case, a list of dates - via a pipe. \
\

\f0\b Output
\f1\b0 : Generate an output file (output.txt) from the second program that contains a list of converted dates in day, abbreviated month & year format (i.e. 1 JAN 1900), followed by the original list of dates. These dates will be coming from the first program and will already be validated; they will simply need to be converted and output.\
\

\f0\b Input
\f1\b0 : Accept input for the first program via the command-line arguments. Command-line input will be the number of \ul valid\ulnone  entries (>= 0) to be redirected from the dates input file (dates.dat). A zero indicates to input all valid entries from the dates input file. The command-line input must be validated, as usual, with all error messages going to the screen, followed by graceful termination of the programs. Be sure you handle instances where the command-line input value exceeds the number of valid entries in the file. \
\
Your first program will validate dates only in valid month/day/year format (i.e. 1/1/1900), \ul skipping\ulnone  any corrupt dates in the dates.dat file (in [K/R] - see page 111 for date validation ideas and page 159 for scanning [sscanf()] ideas). Each date entry in the input file will terminate with a newline. \
\
A valid year is in the range [INT_MIN..INT_MAX] - negative years and year zero are valid. Valid days [1-31] varies for each month (1-12) and leap years must be considered - to the extent outlined in 5.7 [K/R]. The validated dates will then be piped out to the second program. You must be prepared to handle arithmetic overflow situations with regard to the range of a valid year.\
\
The second program will accept these validated dates in the month/day/year format and will convert each of them to the day, abbreviated month & year format \'97 as exhibited above. The abbreviated month should consist of the first three letters of the month, capitalized. These converted dates will be redirected to the output text file (e.g. output.txt). Upon completion, this output will be followed by a copy of the complete original (dates.dat) data - this file name may be \'91hard-coded\'92 in the second program. The second program will require some way to \'91know\'92 that the first program is finished piping dates - that is has terminated.\
\
For example: input \'937/4/1776\'94 is validated/piped and \'934 JUL 1776\'94 would be eventually output. Input \'9312/32/2017\'94 is invalid and would be skipped.\
\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\f2\i \cf0 \ul \ulc0 Redirection hint
\f1\i0 \ulnone : Testing each program individually may be facilitated by initially ignoring redirection (while testing) and have the input or output move from/to the standard streams. Then when you have each program correctly working, individually, you can re-connect the redirection to have the data flow as designed.\
\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\f0\b \cf0 Requirements
\f1\b0 : You may use any material discussed in the first eleven chapters of [D/D] (along with chapter 14) and the first seven chapters of \{K/R]. Style requirements as discussed in class expected. Efficiency should always be considered. Always select the most appropriate loop/decision structures and variable/constant types. Functions should focus on a single task. Main() should be high-level tasks only. Enumerations will likely prove useful. Document compilation/execution, makefile, header file, redirection, and command-line requirements in your program header.\
\
Minimum of two source code files \'97 one for each main() \'97 for the separate programs. Use of (at least) one user-defined header file is required - you may use one for each main source code, or share one for both. You may develop additional source code, as required. You will develop your own dates.dat for testing; however, I will use my own file(s) for my compilation/execution. No global variables!\
\
Use of proper user-defined header file(s) is required. No program heading required for the user-defined header file, but you must include appropriate comments (e.g. the author, labels, etc.). Document requirements for its use and presence in compilation instructions.\
\
Use of a Makefile is required. Include a copy of your Makefile with your submissions (Canvas and in-class), and include in your compile/execute instructions \'97 to include the number and the order of the command-line argument(s) and how to redirect and pipe your data. Provide \'93make build\'94 targets or allow \'93make\'94 to compile your program, or a \'93make all\'94 to compile both programs. Be sure you \'91clean up\'92 as part of your make. Do not have your Makefile execute, only compile.\
\
\
Command line could look something like:\
\pard\pardeftab720\li-360\fi1080\ri-720\partightenfactor0
\cf0 $  ./validateMain  <  dates.dat  0  |  ./displayMain  >  output.txt	
\f0\b \
\
\
\pard\pardeftab720\li-360\fi360\ri-720\partightenfactor0
\cf0 Submission
\f1\b0 : Your program must be able to compile/link and execute on FIU SCIS, using gcc. Test it there before you submit.\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs14 \cf0 \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs16 \cf0 Your source code file name(s) should be meaningful and documented in the first line in your programs. Include \'93Main\'94 in your source code file name for the source code file(s) that includes a main(). Note: both source code files have a main(), so name them well.\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs14 \cf0 \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs16 \cf0 Refer to the Canvas documents: \'93How to Develop a Simple C Program\'94 and \'93Style Guide\'94 documents for details on required program format and documentation. Review all documents carefully!\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs14 \cf0 \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs16 \cf0 Algorithm (pseudocode) should be submitted in a separate text file and included with the Canvas posting and class submission. \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs14 \cf0 \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs16 \cf0 Print out a copy of your source code files, header file(s), Makefile code and pseudocode and submit in class \'97 signed, stapled and collated in the specified sequence: primary source code (w/main) file(s), additional source code file(s), header file(s), Makefile file, and then the pseudocode text file.\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs14 \cf0 \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs16 \cf0 Post a .zip file \'97 with all source code (.c) files, user-defined header file (.h), Makefile, and text files \'97 on the Canvas web site. Do not include any extraneous (e.g. IDE, output) files in the Canvas submission.\
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs14 \cf0 \
\pard\pardeftab720\li-360\ri-720\partightenfactor0

\fs16 \cf0 Program documentation must include the required signed disclaimer (comment) in the heading \'97 no grade will be assigned to programs that omit the disclaimer or signature.\
\
\
\
\pard\pardeftab720\ri-720\partightenfactor0

\f0\b \cf0 Sample Output: from  ./validateMain  <  dates.dat  5  |  ./displayMain  >  output.txt\
\
dates.dat (sample)\
\pard\pardeftab720\ri-720\partightenfactor0

\f1\b0 \cf0 10/13/1994	\
02/04/1998\
09/22/1962\
12/25/-100\
1/40/1999\
02/13/1930\
01/08/1932\
fred\
1/1/250000\
\pard\pardeftab720\ri-720\partightenfactor0

\f0\b \cf0 \
output.txt (sample)\
\pard\pardeftab720\ri-720\partightenfactor0

\f1\b0 \cf0 13 OCT 1994\
 4 FEB 1998\
22 SEP 1962\
25 DEC -100\
13 FEB 1930\
\
10/13/1994	\
02/04/1998\
09/22/1962\
12/25/-100\
1/40/1999\
02/13/1930\
01/08/1932\
fred\
1/1/250000\
\pard\pardeftab720\ri-720\partightenfactor0

\f0\b \cf0 \
}